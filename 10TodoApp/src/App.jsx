import { useEffect, useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import { TodoProvider } from './Contexts/Todocontext'
import './App.css'
import Todoform from './Components/Todoform'
import Todoitem from './Components/Todoitem'

function App() {
  const [todos,settodos] = useState([])
  //these are just function definitions ...function calls will be made in todoform!
  const addTodo=(singleTodo)=>{
        settodos((prevtodo)=>[...prevtodo,{...singleTodo}])
  }

  const updateTodo=(id,todopassed)=>{
    settodos((prev) => prev.map((prevTodo) => (prevTodo.id === id ? todopassed : prevTodo )))
  }
        


  const delTodo=(idpassed)=>{
    settodos((prev) => prev.filter((todo) => todo.id !== idpassed))
  }

  const ToggleComplete=(id)=>{
    settodos((prev) => 
      prev.map((prevTodo) => 
        prevTodo.id === id ? { ...prevTodo, 
          completed:!prevTodo.completed} : prevTodo))
  }

  useEffect(()=>{
    const todos= JSON.parse(localStorage.getItem("todos"))

    if(todos && todos.length>0){
      settodos(todos)
    }
  },[])

  useEffect(()=>{
    localStorage.setItem("todos",JSON.stringify(todos))
  },[todos])

  return (
    <TodoProvider value={{todos,addTodo,delTodo,updateTodo,ToggleComplete}}>
      <div className="bg-[#172842] min-h-screen py-8">
                <div className="w-full max-w-2xl mx-auto  rounded-lg px-4 py-3 text-white">
                    <h1 className="text-2xl font-bold text-center mb-8 mt-2">Manage Your Todos</h1>
                    <div className="mb-4">
                        {/* Todo form goes here */} 
                        <Todoform/>
                    </div>
                    <div className="flex flex-wrap gap-y-3">
                        {/*Loop and Add TodoItem here */}
                        {todos.map((eachtodo)=>{
                            //used {} so put everything in return(...)
                          return(
                            <div key={eachtodo.id} className='w-full'>
                              <Todoitem todo={eachtodo}/>
                            </div>
                          )
                        })}
                    </div>
                </div>
            </div>
    </TodoProvider>
  )
}

export default App
/*========================NOTES=================================
  1. [...prevtodo, { id: Date.now(), ...singleTodo }]
This creates a new array for the state. It uses the spread operator (...) to include all previous todos (prevtodo) and adds a new todo object at the end of the array.

...prevtodo: Spreads the previous todo items into the new array. This ensures that all existing todos are preserved.
{ id: Date.now(), ...singleTodo }: Creates a new todo item object with a unique id generated by Date.now() and the properties of singleTodo


PREV IS NOT THE LAST ITEM EVERYTIME IT MEANS THE LAST STATE OF THE OBJ OR VAR , IN CASE OF ARRAY IT MEANS THE MOST RECENT STATE (THE ENTIRE ARRAY) not the last item of the array

prev.map iterates over each todo item (prevTodo) in the current state array.
For each prevTodo, it checks if the id of the current todo item matches the id passed to the updateTodo function.
If the IDs match, it replaces prevTodo with todopassed (the new todo item).
If the IDs do not match, it leaves prevTodo unchanged

prev.filter creates a new array by filtering out elements based on a condition.
todo.id !== idpassed is the condition used in the filter function.
todo is each item in the prev array.
The filter condition checks if the id of the current todo does not match the idpassed value.
If the condition is true (the IDs do not match), the todo item is included in the new array.
If the condition is false (the IDs match), the todo item is excluded from the new array.
*/